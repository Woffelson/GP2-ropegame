<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_robw</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_box</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_fixed_rotation = true;
image_speed = 0.1;
xscale = 1;
alrm = 0;
rnd = 10;
status = 0; //0 idle 1 walk 2 attack
spede = 0.5;
anger = 1; //when entering territory, speed factors double first with this variable
helth = 2;
sub = noone;
xx = phy_position_x;
yy = phy_position_y;

//idle = spr_beari;
walk = spr_robw;
attack = spr_roba;
shoot = spr_robs;

event_inherited(); //stuff from obj_box create
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited(); //stuff from obj_box step
xx = phy_position_x;
yy = phy_position_y;
if global.action = 1 &amp;&amp; instance_exists(obj_player) &amp;&amp; helth &gt; 0
{
if alrm &lt; rnd //when timer runs...
{
    alrm += 0.1*anger;
    switch(status)
    {
    case 0: image_speed = 0.1*anger; break;
    case 1: //if walking
    {
        if phy_speed &lt; spede
            physics_apply_local_force(0,0,spede*xscale*anger,0);
        if physics_test_overlap(phy_position_x+(xscale*16),phy_position_y-4,
            phy_rotation,obj_block) //turn around if wall collision sössönsöö
            || physics_test_overlap(phy_position_x+(xscale*16),phy_position_y-4,
            phy_rotation,obj_door)
            xscale *= -1;
        image_speed = 0.1*anger;
        break;
    }
    case 2:
    {
        //if sprite_index != attack image_index = 0;
        xscale = sign(obj_player.x - x); //face player
        if phy_speed_x = 0 physics_apply_local_impulse(0,0,0.2*xscale,0);
        //alrm = 0;
        image_speed = 0.5;
        break;
    }
    }
    if status != 2 &amp;&amp; distance_to_point(x,obj_player.y) &lt; 32 &amp;&amp; 
        distance_to_point(obj_player.x,y) &lt; 160 //territory anger...
        &amp;&amp; (!collision_line(x,y,obj_player.x,obj_player.y,obj_slock,1,1)
        &amp;&amp; !collision_line(x,y,obj_player.x,obj_player.y,obj_door,1,1))
    {
        xscale = sign(obj_player.x - x); //face player
        anger = 2;
    }
    else anger = 1;
}
else
{
    alrm = 0;
    rnd = irandom_range(5,15);
    if distance_to_object(obj_player) &lt; 96 &amp;&amp; irandom(2) = 1
        &amp;&amp; (!collision_line(x,y,obj_player.x,obj_player.y,obj_slock,1,1)
        &amp;&amp; !collision_line(x,y,obj_player.x,obj_player.y,obj_door,1,1))
        status = 2; //attack
    else status = choose(0,1,1); //randomly idle or walk
    if anger = 1 xscale = choose(xscale,xscale,xscale*-1); //randomly turn around 1/3
}
}
else if helth &lt;= 0
{
    sprite_index = spr_expl;
    image_speed = 0.25;
    phy_speed_x = 0;
    phy_speed_y = 0;
}
else image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_crusher">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !physics_test_overlap(xx+8,yy+4,0,other) &amp;&amp; !physics_test_overlap(xx-8,yy+4,0,other)
    &amp;&amp; physics_test_overlap(xx,yy-4,0,other) &amp;&amp; phy_speed_y = 0 &amp;&amp; other.image_index &lt;8
    helth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instance_destroy();
if other.sprite_index = spr_expl helth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_trap">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instance_destroy();
helth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index = attack
{
    alrm = rnd;
    status = 0;
}
else if sprite_index = spr_expl instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if helth &gt; 0
{
if status = 0
{
    sprite_index = walk;
    image_index = 0;
}
else if status = 1
    sprite_index = walk;
else if status = 2
    sprite_index = attack;
}
draw_sprite_ext(sprite_index,image_index,round(x),round(y),xscale,image_yscale,0,c_white,1);

/*//collision debug
draw_point_colour(phy_position_x+(xscale*16),phy_position_y-4,c_lime);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>4</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,24</point>
    <point>8,16</point>
  </PhysicsShapePoints>
</object>
