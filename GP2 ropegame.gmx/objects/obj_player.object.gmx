<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_controls0();

horizontal = 0; //checks whether player is moving
spede = 2; //speed constant (for acceleration in case of physics engine)
jumpspeed = 0.15; //initial jump
glide = 0.55; //determines actual jump length
jumping = 0; //whether jumping or not
gump = 0; //run forrest run (or not)
phy_rotation = 0;
phy_fixed_rotation = true; //never rotate player

rope = noone;
ropelength = 64;
f = 64; //force variable when hanging on rope

xscale = 1; //basically for graphics to mirror player sideways when needed, 1=right -1=left
xscale2 = 1; //xscale for graphics

//CAMERA
obj_master.viewfollow = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CAMERA
obj_master.viewfollow = id;
phy_active = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xx = phy_position_x; //coordination initialization, since physics have
yy = phy_position_y; //own coordinates calculation

phy_active = global.action; //if game is paused etc, doesn't calculate physics
if obj_master.viewfollow = noone
obj_master.viewfollow = id;

//Controls
inst = instance_place(xx,yy,obj_text); //checks collision with text trigger
if inst != noone &amp;&amp; (inst.mode &gt; 1 || (inst.mode &lt; 2 &amp;&amp; //mode &gt;1 instatriggers
    keyboard_check_pressed(key_A))&amp;&amp; inst.start_write=0) //&lt;2 keytriggers
    inst.active = 1; //text object gets TrIgGeReDd with facts and logic!!1!
else if global.action = 1 //if game is not paused/texting, calls controls script
    scr_controls1(key_l,key_r,key_u,key_d,key_A,key_B,key_X);

//Moving
if horizontal != 0 //|| damage &gt; 0
{
    meno = xscale * max(1,spede*gump);
if abs(phy_speed_x) &lt; abs(meno)//if any additional speed doesn't exceed player's speed (?)
{

if !physics_test_overlap(xx+meno,yy-1,phy_rotation,obj_slock)
{
    physics_apply_local_force(0,0,meno,0); //ground
    if jumping = 0 &amp;&amp; gump = 0 physics_apply_local_force(0,0,0,-abs(meno));//PURKKAAA!!1!
}
else if !physics_test_overlap(xx+meno/4,yy-(abs(meno*2)),phy_rotation,obj_slock)
    &amp;&amp; jumping = 0 //prevents some slope boosted jumps
    physics_apply_local_force(0,0,meno/4,-(abs(meno))); //slope up
}
}
/*
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_slock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision happens
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xs = xscale;
if controls = 1 xs = xscale2;
var rd = direction;
if instance_exists(rope) rd = point_direction(xx,yy,rope.x,rope.y);
draw_sprite_ext(spr_arm,0,round(x),round(y),image_xscale,xs,rd,c_white,1);
draw_sprite_ext(sprite_index,0,round(x),round(y),xs,image_yscale,0,c_white,1);
//status banner or such on player's upper side, if needed:
//draw_sprite(sprite2,image_index,round(x),round(y));
draw_sprite_ext(spr_aim,0,round(x),round(y),1,1,direction,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>4</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,20</point>
    <point>8,16</point>
  </PhysicsShapePoints>
</object>
