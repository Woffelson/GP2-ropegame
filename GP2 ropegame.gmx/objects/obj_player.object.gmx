<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprite0</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_controls0();
x = global.player_x;
y = global.player_y;

horizontal = 0; //checks whether player is moving
spede = 2; //speed constant (for acceleration in case of physics engine)
jumpspeed = 0.15; //initial jump
glide = 0.55; //determines actual jump length
jumping = 0; //whether jumping or not
gump = 0; //run forrest run (or not)
phy_rotation = 0;
phy_fixed_rotation = true; //never rotate player

rope = noone;
ropelength = 64;
f = 64; //force variable when hanging on rope

damage = 0;

//GRAPHICS
s = 0;
spr[0] = sprite0;
spr[1] = spr_walk;
spr[2] = spr_run;
spr[3] = spr_jump;
spr[4] = spr_dam;
spr[5] = spr_verisplat;
spr[6] = spr_wall;
xscale = 1; //basically for graphics to mirror player sideways when needed, 1=right -1=left
xscale2 = 1; //xscale for graphics

//CAMERA
obj_master.viewfollow = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>damage = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CAMERA
obj_master.viewfollow = id;
phy_active = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.helth &lt;= 0 //THAT'S A LOTTA DAMAGE
{
    //alarm[2] = room_speed*2; //put stuff into that event, please
    //if global.save game_load("save.dat");
    //else room_restart();
    //with(obj_master) 
    //phy_speed_x = 0;
    //phy_speed_y = 0;
    s = 5; //splatters
    if !audio_is_playing(snd_death) audio_play_sound(snd_death,1,0);
}
else
{
xx = phy_position_x; //coordination initialization, since physics have
yy = phy_position_y; //own coordinates calculation
global.player_x = xx;
global.player_y = yy;

phy_active = global.action; //if game is paused etc, doesn't calculate physics
if obj_master.viewfollow = noone
obj_master.viewfollow = id;

//Controls
inst = instance_place(xx,yy,obj_text); //checks collision with text trigger
iinst = instance_place(xx,yy,obj_save);
if inst != noone &amp;&amp; (inst.mode &gt; 1 || (inst.mode &lt; 2 &amp;&amp; //mode &gt;1 instatriggers
    keyboard_check_pressed(key_A))&amp;&amp; inst.start_write=0) //&lt;2 keytriggers
    inst.active = 1; //text object gets TrIgGeReDd with facts and logic!!1!
else if iinst != noone &amp;&amp; keyboard_check_pressed(key_A) &amp;&amp; iinst.active = 0
    iinst.active = 1;
else if global.action = 1 //if game is not paused/texting, calls controls script
    scr_controls1(key_l,key_r,key_u,key_d,key_A,key_B,key_X);

//Moving
var wall = 0;
if horizontal != 0 &amp;&amp; damage = 0 &amp;&amp; s != 5//|| damage &gt; 0
{
    meno = xscale * max(1,spede*gump);
    if abs(phy_speed_x) &lt; abs(meno)//if any additional speed doesn't exceed player's speed (?)
    {
        if !physics_test_overlap(xx+meno,yy-1,phy_rotation,obj_slock)
        {
            physics_apply_local_force(0,0,meno/2,0); //ground
            if jumping = 0 &amp;&amp; gump = 0
                physics_apply_local_force(0,0,0,-abs(meno)/1.5);//PURKKAA!1!
        }
        else if !physics_test_overlap(xx+meno,yy-(abs(meno*2)),phy_rotation,obj_slock)
            &amp;&amp; jumping = 0 //prevents some slope boosted jumps
            physics_apply_local_force(0,0,meno,-(abs(meno))); //slope up
            else
            {
                physics_apply_local_force(0,0,meno/4,-abs(meno/5)); //scratch wall
                if phy_speed_y != 0 
                {
                    xscale2 = -horizontal;
                    wall = 1;
                }
            }
    }
}
if s != 5 &amp;&amp; damage &gt;= 1 s = 4; //damage sprite
else if wall = 1 s = 6;
else if abs(phy_speed_y) &gt; 0.2 &amp;&amp; (!physics_test_overlap(xx+8,yy+16,phy_rotation,obj_slock)
    || !physics_test_overlap(xx-8,yy+16,phy_rotation,obj_slock))
    s = 3; //jump sprite
else if horizontal != 0 s = 1+gump; //walking or running sprite
else s = 0; //idle sprite

if damage &gt;= 1 
{
    if alarm[1] = -1 alarm[1] = room_speed/2; //delay until can take dmg again
    if damage &gt; 1
    {
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
}
}
/*
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_glass">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision happens
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_crusher">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !physics_test_overlap(xx+8,yy+4,0,other) &amp;&amp; !physics_test_overlap(xx-8,yy+4,0,other)
    &amp;&amp; physics_test_overlap(xx,yy-4,0,other) &amp;&amp; phy_speed_y = 0 &amp;&amp; other.image_index &lt;8
    global.helth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.sprite_index = spr_expl global.helth -=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision happens
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision happens
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spike">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if damage = 0
{
    global.helth -= 0.5;
    damage = 1;
    if other.direction &lt; 90 || other.direction &gt; 270
        physics_apply_local_impulse(0,0,jumpspeed,-jumpspeed);
    else physics_apply_local_impulse(0,0,-jumpspeed,-jumpspeed);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_trap">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.inactive = 0
global.helth -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if damage = 0
{
    damage = 2;
    global.helth -= 0.5;
    with(other) instance_destroy();
    //clamp(phy_speed_x,0,0.2);
    //clamp(phy_speed_y,0,0.2);
    phy_speed_x = 0;
    phy_speed_y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rob">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.status = 2
{
    if damage = 0
        global.helth -= 1;
    damage = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bear">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.status = 2
{
    if damage = 0
        global.helth -= 1;
    damage = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_slock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision happens
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if s = 5 load();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//helth = 0;
if room = room2 room = room3;
else room = room2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xs = xscale;
if controls = 1 &amp;&amp; s != 5 //s=5 is blood splat
{
    xs = xscale2;
    image_speed = 0.25*sign(horizontal*xscale2); //backward moving reverses subimages
}
else image_speed = 0.25;
var w = 0;
if (horizontal != 0 &amp;&amp; global.action = 1 &amp;&amp; s != 3) || s = 5 //(phy_speed_y = 0)
    w = image_index;
else if phy_speed_y &gt; 0 w = 1;
else w = 0;
sprite_index = spr[s]; //makes sure that frame number updates for current spr animation
var rd = direction;
if instance_exists(rope) rd = point_direction(xx,yy,rope.x,rope.y);
if damage = 0 &amp;&amp; s != 5
draw_sprite_ext(spr_arm,global.unlock[0],round(x),round(y),image_xscale,xs,rd,c_white,1);
draw_sprite_ext(spr[s],w,round(x),round(y),xs,image_yscale,0,c_white,1);
//status banner or such on player's upper side, if needed:
//draw_sprite(sprite2,image_index,round(x),round(y));
//draw_sprite_ext(spr_aim,0,round(mouse_x),round(mouse_y),1,1,0,c_white,1); //x,y,direction,-32

//draw_text(x,y-16,helth);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>4</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,20</point>
    <point>8,16</point>
  </PhysicsShapePoints>
</object>
